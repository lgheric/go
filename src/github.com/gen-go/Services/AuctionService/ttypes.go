// Autogenerated by Thrift Compiler (0.9.3)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package AuctionService

import (
	"bytes"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

var GoUnusedProtection__ int

// Attributes:
//  - Code
//  - Message
type InvalidException struct {
	Code    int32  `thrift:"code,1" json:"code"`
	Message string `thrift:"message,2" json:"message"`
}

func NewInvalidException() *InvalidException {
	return &InvalidException{}
}

func (p *InvalidException) GetCode() int32 {
	return p.Code
}

func (p *InvalidException) GetMessage() string {
	return p.Message
}
func (p *InvalidException) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *InvalidException) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Code = v
	}
	return nil
}

func (p *InvalidException) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Message = v
	}
	return nil
}

func (p *InvalidException) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("InvalidException"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *InvalidException) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("code", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:code: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Code)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.code (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:code: ", p), err)
	}
	return err
}

func (p *InvalidException) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("message", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:message: ", p), err)
	}
	if err := oprot.WriteString(string(p.Message)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.message (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:message: ", p), err)
	}
	return err
}

func (p *InvalidException) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("InvalidException(%+v)", *p)
}

func (p *InvalidException) Error() string {
	return p.String()
}

// Attributes:
//  - Flag
//  - Error
type BidMsg struct {
	Flag  bool   `thrift:"flag,1" json:"flag"`
	Error string `thrift:"error,2" json:"error"`
}

func NewBidMsg() *BidMsg {
	return &BidMsg{}
}

func (p *BidMsg) GetFlag() bool {
	return p.Flag
}

func (p *BidMsg) GetError() string {
	return p.Error
}
func (p *BidMsg) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *BidMsg) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Flag = v
	}
	return nil
}

func (p *BidMsg) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Error = v
	}
	return nil
}

func (p *BidMsg) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("BidMsg"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *BidMsg) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("flag", thrift.BOOL, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:flag: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.Flag)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.flag (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:flag: ", p), err)
	}
	return err
}

func (p *BidMsg) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("error", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:error: ", p), err)
	}
	if err := oprot.WriteString(string(p.Error)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.error (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:error: ", p), err)
	}
	return err
}

func (p *BidMsg) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BidMsg(%+v)", *p)
}

// Attributes:
//  - OrderId
//  - OrderNo
//  - BidStartPrice
//  - BidBestPrice
//  - BiddingBestPrice
//  - BidBestDealerId
//  - TransferFee
//  - BiddingBestDealerId
//  - Price
//  - LeftTime
//  - StartTime
//  - BiddingStartTime
//  - ActElapsedTime
//  - EstElapsedTime
type BiddingMsg struct {
	OrderId             int64   `thrift:"orderId,1" json:"orderId"`
	OrderNo             string  `thrift:"orderNo,2" json:"orderNo"`
	BidStartPrice       float64 `thrift:"bidStartPrice,3" json:"bidStartPrice"`
	BidBestPrice        float64 `thrift:"bidBestPrice,4" json:"bidBestPrice"`
	BiddingBestPrice    float64 `thrift:"biddingBestPrice,5" json:"biddingBestPrice"`
	BidBestDealerId     int64   `thrift:"bidBestDealerId,6" json:"bidBestDealerId"`
	TransferFee         float64 `thrift:"transferFee,7" json:"transferFee"`
	BiddingBestDealerId int64   `thrift:"biddingBestDealerId,8" json:"biddingBestDealerId"`
	Price               float64 `thrift:"price,9" json:"price"`
	LeftTime            int64   `thrift:"leftTime,10" json:"leftTime"`
	StartTime           int64   `thrift:"startTime,11" json:"startTime"`
	BiddingStartTime    int64   `thrift:"biddingStartTime,12" json:"biddingStartTime"`
	ActElapsedTime      int64   `thrift:"actElapsedTime,13" json:"actElapsedTime"`
	EstElapsedTime      int64   `thrift:"estElapsedTime,14" json:"estElapsedTime"`
}

func NewBiddingMsg() *BiddingMsg {
	return &BiddingMsg{}
}

func (p *BiddingMsg) GetOrderId() int64 {
	return p.OrderId
}

func (p *BiddingMsg) GetOrderNo() string {
	return p.OrderNo
}

func (p *BiddingMsg) GetBidStartPrice() float64 {
	return p.BidStartPrice
}

func (p *BiddingMsg) GetBidBestPrice() float64 {
	return p.BidBestPrice
}

func (p *BiddingMsg) GetBiddingBestPrice() float64 {
	return p.BiddingBestPrice
}

func (p *BiddingMsg) GetBidBestDealerId() int64 {
	return p.BidBestDealerId
}

func (p *BiddingMsg) GetTransferFee() float64 {
	return p.TransferFee
}

func (p *BiddingMsg) GetBiddingBestDealerId() int64 {
	return p.BiddingBestDealerId
}

func (p *BiddingMsg) GetPrice() float64 {
	return p.Price
}

func (p *BiddingMsg) GetLeftTime() int64 {
	return p.LeftTime
}

func (p *BiddingMsg) GetStartTime() int64 {
	return p.StartTime
}

func (p *BiddingMsg) GetBiddingStartTime() int64 {
	return p.BiddingStartTime
}

func (p *BiddingMsg) GetActElapsedTime() int64 {
	return p.ActElapsedTime
}

func (p *BiddingMsg) GetEstElapsedTime() int64 {
	return p.EstElapsedTime
}
func (p *BiddingMsg) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.readField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.readField9(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.readField10(iprot); err != nil {
				return err
			}
		case 11:
			if err := p.readField11(iprot); err != nil {
				return err
			}
		case 12:
			if err := p.readField12(iprot); err != nil {
				return err
			}
		case 13:
			if err := p.readField13(iprot); err != nil {
				return err
			}
		case 14:
			if err := p.readField14(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *BiddingMsg) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.OrderId = v
	}
	return nil
}

func (p *BiddingMsg) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.OrderNo = v
	}
	return nil
}

func (p *BiddingMsg) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.BidStartPrice = v
	}
	return nil
}

func (p *BiddingMsg) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.BidBestPrice = v
	}
	return nil
}

func (p *BiddingMsg) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.BiddingBestPrice = v
	}
	return nil
}

func (p *BiddingMsg) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.BidBestDealerId = v
	}
	return nil
}

func (p *BiddingMsg) readField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.TransferFee = v
	}
	return nil
}

func (p *BiddingMsg) readField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 8: ", err)
	} else {
		p.BiddingBestDealerId = v
	}
	return nil
}

func (p *BiddingMsg) readField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return thrift.PrependError("error reading field 9: ", err)
	} else {
		p.Price = v
	}
	return nil
}

func (p *BiddingMsg) readField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 10: ", err)
	} else {
		p.LeftTime = v
	}
	return nil
}

func (p *BiddingMsg) readField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 11: ", err)
	} else {
		p.StartTime = v
	}
	return nil
}

func (p *BiddingMsg) readField12(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 12: ", err)
	} else {
		p.BiddingStartTime = v
	}
	return nil
}

func (p *BiddingMsg) readField13(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 13: ", err)
	} else {
		p.ActElapsedTime = v
	}
	return nil
}

func (p *BiddingMsg) readField14(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 14: ", err)
	} else {
		p.EstElapsedTime = v
	}
	return nil
}

func (p *BiddingMsg) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("BiddingMsg"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := p.writeField11(oprot); err != nil {
		return err
	}
	if err := p.writeField12(oprot); err != nil {
		return err
	}
	if err := p.writeField13(oprot); err != nil {
		return err
	}
	if err := p.writeField14(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *BiddingMsg) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("orderId", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:orderId: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.OrderId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.orderId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:orderId: ", p), err)
	}
	return err
}

func (p *BiddingMsg) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("orderNo", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:orderNo: ", p), err)
	}
	if err := oprot.WriteString(string(p.OrderNo)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.orderNo (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:orderNo: ", p), err)
	}
	return err
}

func (p *BiddingMsg) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("bidStartPrice", thrift.DOUBLE, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:bidStartPrice: ", p), err)
	}
	if err := oprot.WriteDouble(float64(p.BidStartPrice)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.bidStartPrice (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:bidStartPrice: ", p), err)
	}
	return err
}

func (p *BiddingMsg) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("bidBestPrice", thrift.DOUBLE, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:bidBestPrice: ", p), err)
	}
	if err := oprot.WriteDouble(float64(p.BidBestPrice)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.bidBestPrice (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:bidBestPrice: ", p), err)
	}
	return err
}

func (p *BiddingMsg) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("biddingBestPrice", thrift.DOUBLE, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:biddingBestPrice: ", p), err)
	}
	if err := oprot.WriteDouble(float64(p.BiddingBestPrice)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.biddingBestPrice (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:biddingBestPrice: ", p), err)
	}
	return err
}

func (p *BiddingMsg) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("bidBestDealerId", thrift.I64, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:bidBestDealerId: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.BidBestDealerId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.bidBestDealerId (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:bidBestDealerId: ", p), err)
	}
	return err
}

func (p *BiddingMsg) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("transferFee", thrift.DOUBLE, 7); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:transferFee: ", p), err)
	}
	if err := oprot.WriteDouble(float64(p.TransferFee)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.transferFee (7) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 7:transferFee: ", p), err)
	}
	return err
}

func (p *BiddingMsg) writeField8(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("biddingBestDealerId", thrift.I64, 8); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:biddingBestDealerId: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.BiddingBestDealerId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.biddingBestDealerId (8) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 8:biddingBestDealerId: ", p), err)
	}
	return err
}

func (p *BiddingMsg) writeField9(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("price", thrift.DOUBLE, 9); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:price: ", p), err)
	}
	if err := oprot.WriteDouble(float64(p.Price)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.price (9) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 9:price: ", p), err)
	}
	return err
}

func (p *BiddingMsg) writeField10(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("leftTime", thrift.I64, 10); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:leftTime: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.LeftTime)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.leftTime (10) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 10:leftTime: ", p), err)
	}
	return err
}

func (p *BiddingMsg) writeField11(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("startTime", thrift.I64, 11); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:startTime: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.StartTime)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.startTime (11) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 11:startTime: ", p), err)
	}
	return err
}

func (p *BiddingMsg) writeField12(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("biddingStartTime", thrift.I64, 12); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:biddingStartTime: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.BiddingStartTime)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.biddingStartTime (12) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 12:biddingStartTime: ", p), err)
	}
	return err
}

func (p *BiddingMsg) writeField13(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("actElapsedTime", thrift.I64, 13); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:actElapsedTime: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.ActElapsedTime)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.actElapsedTime (13) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 13:actElapsedTime: ", p), err)
	}
	return err
}

func (p *BiddingMsg) writeField14(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("estElapsedTime", thrift.I64, 14); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:estElapsedTime: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.EstElapsedTime)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.estElapsedTime (14) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 14:estElapsedTime: ", p), err)
	}
	return err
}

func (p *BiddingMsg) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BiddingMsg(%+v)", *p)
}
