// Autogenerated by Thrift Compiler (0.9.3)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package AuctionService

import (
	"bytes"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

type AuctionService interface {
	// Parameters:
	//  - DealerId
	//  - OrderId
	//  - BasePrice
	//  - AddPrice
	//  - DeviceType
	Bidding(dealerId int64, orderId int64, basePrice float64, addPrice float64, deviceType int32) (r *BiddingMsg, err error)
	// Parameters:
	//  - DealerId
	//  - OrderId
	//  - Price
	//  - DeviceType
	Bid(dealerId int64, orderId int64, price float64, deviceType int32) (r *BidMsg, err error)
	// Parameters:
	//  - DealerId
	//  - OrderId
	IntelBidSet(dealerId int64, orderId int64) (r bool, err error)
	// Parameters:
	//  - DealerId
	//  - OrderId
	IntelBidStop(dealerId int64, orderId int64) (r bool, err error)
	// Parameters:
	//  - DealerId
	//  - OrderId
	//  - BasePrice
	//  - AddPrice
	IntelBidding(dealerId int64, orderId int64, basePrice float64, addPrice float64) (r bool, err error)
}

type AuctionServiceClient struct {
	Transport       thrift.TTransport
	ProtocolFactory thrift.TProtocolFactory
	InputProtocol   thrift.TProtocol
	OutputProtocol  thrift.TProtocol
	SeqId           int32
}

func NewAuctionServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *AuctionServiceClient {
	return &AuctionServiceClient{Transport: t,
		ProtocolFactory: f,
		InputProtocol:   f.GetProtocol(t),
		OutputProtocol:  f.GetProtocol(t),
		SeqId:           0,
	}
}

func NewAuctionServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *AuctionServiceClient {
	return &AuctionServiceClient{Transport: t,
		ProtocolFactory: nil,
		InputProtocol:   iprot,
		OutputProtocol:  oprot,
		SeqId:           0,
	}
}

// Parameters:
//  - DealerId
//  - OrderId
//  - BasePrice
//  - AddPrice
//  - DeviceType
func (p *AuctionServiceClient) Bidding(dealerId int64, orderId int64, basePrice float64, addPrice float64, deviceType int32) (r *BiddingMsg, err error) {
	if err = p.sendBidding(dealerId, orderId, basePrice, addPrice, deviceType); err != nil {
		return
	}
	return p.recvBidding()
}

func (p *AuctionServiceClient) sendBidding(dealerId int64, orderId int64, basePrice float64, addPrice float64, deviceType int32) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("bidding", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := AuctionServiceBiddingArgs{
		DealerId:   dealerId,
		OrderId:    orderId,
		BasePrice:  basePrice,
		AddPrice:   addPrice,
		DeviceType: deviceType,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *AuctionServiceClient) recvBidding() (value *BiddingMsg, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "bidding" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "bidding failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "bidding failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error0 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error1 error
		error1, err = error0.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error1
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "bidding failed: invalid message type")
		return
	}
	result := AuctionServiceBiddingResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.Ex != nil {
		err = result.Ex
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - DealerId
//  - OrderId
//  - Price
//  - DeviceType
func (p *AuctionServiceClient) Bid(dealerId int64, orderId int64, price float64, deviceType int32) (r *BidMsg, err error) {
	if err = p.sendBid(dealerId, orderId, price, deviceType); err != nil {
		return
	}
	return p.recvBid()
}

func (p *AuctionServiceClient) sendBid(dealerId int64, orderId int64, price float64, deviceType int32) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("bid", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := AuctionServiceBidArgs{
		DealerId:   dealerId,
		OrderId:    orderId,
		Price:      price,
		DeviceType: deviceType,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *AuctionServiceClient) recvBid() (value *BidMsg, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "bid" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "bid failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "bid failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error2 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error3 error
		error3, err = error2.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error3
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "bid failed: invalid message type")
		return
	}
	result := AuctionServiceBidResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.Ex != nil {
		err = result.Ex
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - DealerId
//  - OrderId
func (p *AuctionServiceClient) IntelBidSet(dealerId int64, orderId int64) (r bool, err error) {
	if err = p.sendIntelBidSet(dealerId, orderId); err != nil {
		return
	}
	return p.recvIntelBidSet()
}

func (p *AuctionServiceClient) sendIntelBidSet(dealerId int64, orderId int64) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("intelBidSet", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := AuctionServiceIntelBidSetArgs{
		DealerId: dealerId,
		OrderId:  orderId,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *AuctionServiceClient) recvIntelBidSet() (value bool, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "intelBidSet" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "intelBidSet failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "intelBidSet failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error4 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error5 error
		error5, err = error4.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error5
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "intelBidSet failed: invalid message type")
		return
	}
	result := AuctionServiceIntelBidSetResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.Ex != nil {
		err = result.Ex
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - DealerId
//  - OrderId
func (p *AuctionServiceClient) IntelBidStop(dealerId int64, orderId int64) (r bool, err error) {
	if err = p.sendIntelBidStop(dealerId, orderId); err != nil {
		return
	}
	return p.recvIntelBidStop()
}

func (p *AuctionServiceClient) sendIntelBidStop(dealerId int64, orderId int64) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("intelBidStop", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := AuctionServiceIntelBidStopArgs{
		DealerId: dealerId,
		OrderId:  orderId,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *AuctionServiceClient) recvIntelBidStop() (value bool, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "intelBidStop" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "intelBidStop failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "intelBidStop failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error6 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error7 error
		error7, err = error6.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error7
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "intelBidStop failed: invalid message type")
		return
	}
	result := AuctionServiceIntelBidStopResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.Ex != nil {
		err = result.Ex
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - DealerId
//  - OrderId
//  - BasePrice
//  - AddPrice
func (p *AuctionServiceClient) IntelBidding(dealerId int64, orderId int64, basePrice float64, addPrice float64) (r bool, err error) {
	if err = p.sendIntelBidding(dealerId, orderId, basePrice, addPrice); err != nil {
		return
	}
	return p.recvIntelBidding()
}

func (p *AuctionServiceClient) sendIntelBidding(dealerId int64, orderId int64, basePrice float64, addPrice float64) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("intelBidding", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := AuctionServiceIntelBiddingArgs{
		DealerId:  dealerId,
		OrderId:   orderId,
		BasePrice: basePrice,
		AddPrice:  addPrice,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *AuctionServiceClient) recvIntelBidding() (value bool, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "intelBidding" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "intelBidding failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "intelBidding failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error8 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error9 error
		error9, err = error8.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error9
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "intelBidding failed: invalid message type")
		return
	}
	result := AuctionServiceIntelBiddingResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.Ex != nil {
		err = result.Ex
		return
	}
	value = result.GetSuccess()
	return
}

type AuctionServiceProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      AuctionService
}

func (p *AuctionServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *AuctionServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *AuctionServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewAuctionServiceProcessor(handler AuctionService) *AuctionServiceProcessor {

	self10 := &AuctionServiceProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self10.processorMap["bidding"] = &auctionServiceProcessorBidding{handler: handler}
	self10.processorMap["bid"] = &auctionServiceProcessorBid{handler: handler}
	self10.processorMap["intelBidSet"] = &auctionServiceProcessorIntelBidSet{handler: handler}
	self10.processorMap["intelBidStop"] = &auctionServiceProcessorIntelBidStop{handler: handler}
	self10.processorMap["intelBidding"] = &auctionServiceProcessorIntelBidding{handler: handler}
	return self10
}

func (p *AuctionServiceProcessor) Process(iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x11 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x11.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return false, x11

}

type auctionServiceProcessorBidding struct {
	handler AuctionService
}

func (p *auctionServiceProcessorBidding) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AuctionServiceBiddingArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("bidding", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := AuctionServiceBiddingResult{}
	var retval *BiddingMsg
	var err2 error
	if retval, err2 = p.handler.Bidding(args.DealerId, args.OrderId, args.BasePrice, args.AddPrice, args.DeviceType); err2 != nil {
		switch v := err2.(type) {
		case *InvalidException:
			result.Ex = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing bidding: "+err2.Error())
			oprot.WriteMessageBegin("bidding", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("bidding", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type auctionServiceProcessorBid struct {
	handler AuctionService
}

func (p *auctionServiceProcessorBid) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AuctionServiceBidArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("bid", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := AuctionServiceBidResult{}
	var retval *BidMsg
	var err2 error
	if retval, err2 = p.handler.Bid(args.DealerId, args.OrderId, args.Price, args.DeviceType); err2 != nil {
		switch v := err2.(type) {
		case *InvalidException:
			result.Ex = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing bid: "+err2.Error())
			oprot.WriteMessageBegin("bid", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("bid", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type auctionServiceProcessorIntelBidSet struct {
	handler AuctionService
}

func (p *auctionServiceProcessorIntelBidSet) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AuctionServiceIntelBidSetArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("intelBidSet", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := AuctionServiceIntelBidSetResult{}
	var retval bool
	var err2 error
	if retval, err2 = p.handler.IntelBidSet(args.DealerId, args.OrderId); err2 != nil {
		switch v := err2.(type) {
		case *InvalidException:
			result.Ex = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing intelBidSet: "+err2.Error())
			oprot.WriteMessageBegin("intelBidSet", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("intelBidSet", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type auctionServiceProcessorIntelBidStop struct {
	handler AuctionService
}

func (p *auctionServiceProcessorIntelBidStop) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AuctionServiceIntelBidStopArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("intelBidStop", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := AuctionServiceIntelBidStopResult{}
	var retval bool
	var err2 error
	if retval, err2 = p.handler.IntelBidStop(args.DealerId, args.OrderId); err2 != nil {
		switch v := err2.(type) {
		case *InvalidException:
			result.Ex = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing intelBidStop: "+err2.Error())
			oprot.WriteMessageBegin("intelBidStop", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("intelBidStop", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type auctionServiceProcessorIntelBidding struct {
	handler AuctionService
}

func (p *auctionServiceProcessorIntelBidding) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AuctionServiceIntelBiddingArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("intelBidding", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := AuctionServiceIntelBiddingResult{}
	var retval bool
	var err2 error
	if retval, err2 = p.handler.IntelBidding(args.DealerId, args.OrderId, args.BasePrice, args.AddPrice); err2 != nil {
		switch v := err2.(type) {
		case *InvalidException:
			result.Ex = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing intelBidding: "+err2.Error())
			oprot.WriteMessageBegin("intelBidding", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("intelBidding", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - DealerId
//  - OrderId
//  - BasePrice
//  - AddPrice
//  - DeviceType
type AuctionServiceBiddingArgs struct {
	DealerId   int64   `thrift:"dealerId,1" json:"dealerId"`
	OrderId    int64   `thrift:"orderId,2" json:"orderId"`
	BasePrice  float64 `thrift:"basePrice,3" json:"basePrice"`
	AddPrice   float64 `thrift:"addPrice,4" json:"addPrice"`
	DeviceType int32   `thrift:"deviceType,5" json:"deviceType"`
}

func NewAuctionServiceBiddingArgs() *AuctionServiceBiddingArgs {
	return &AuctionServiceBiddingArgs{}
}

func (p *AuctionServiceBiddingArgs) GetDealerId() int64 {
	return p.DealerId
}

func (p *AuctionServiceBiddingArgs) GetOrderId() int64 {
	return p.OrderId
}

func (p *AuctionServiceBiddingArgs) GetBasePrice() float64 {
	return p.BasePrice
}

func (p *AuctionServiceBiddingArgs) GetAddPrice() float64 {
	return p.AddPrice
}

func (p *AuctionServiceBiddingArgs) GetDeviceType() int32 {
	return p.DeviceType
}
func (p *AuctionServiceBiddingArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AuctionServiceBiddingArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.DealerId = v
	}
	return nil
}

func (p *AuctionServiceBiddingArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.OrderId = v
	}
	return nil
}

func (p *AuctionServiceBiddingArgs) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.BasePrice = v
	}
	return nil
}

func (p *AuctionServiceBiddingArgs) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.AddPrice = v
	}
	return nil
}

func (p *AuctionServiceBiddingArgs) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.DeviceType = v
	}
	return nil
}

func (p *AuctionServiceBiddingArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("bidding_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AuctionServiceBiddingArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("dealerId", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:dealerId: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.DealerId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.dealerId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:dealerId: ", p), err)
	}
	return err
}

func (p *AuctionServiceBiddingArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("orderId", thrift.I64, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:orderId: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.OrderId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.orderId (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:orderId: ", p), err)
	}
	return err
}

func (p *AuctionServiceBiddingArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("basePrice", thrift.DOUBLE, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:basePrice: ", p), err)
	}
	if err := oprot.WriteDouble(float64(p.BasePrice)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.basePrice (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:basePrice: ", p), err)
	}
	return err
}

func (p *AuctionServiceBiddingArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("addPrice", thrift.DOUBLE, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:addPrice: ", p), err)
	}
	if err := oprot.WriteDouble(float64(p.AddPrice)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.addPrice (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:addPrice: ", p), err)
	}
	return err
}

func (p *AuctionServiceBiddingArgs) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("deviceType", thrift.I32, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:deviceType: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.DeviceType)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.deviceType (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:deviceType: ", p), err)
	}
	return err
}

func (p *AuctionServiceBiddingArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AuctionServiceBiddingArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ex
type AuctionServiceBiddingResult struct {
	Success *BiddingMsg       `thrift:"success,0" json:"success,omitempty"`
	Ex      *InvalidException `thrift:"ex,1" json:"ex,omitempty"`
}

func NewAuctionServiceBiddingResult() *AuctionServiceBiddingResult {
	return &AuctionServiceBiddingResult{}
}

var AuctionServiceBiddingResult_Success_DEFAULT *BiddingMsg

func (p *AuctionServiceBiddingResult) GetSuccess() *BiddingMsg {
	if !p.IsSetSuccess() {
		return AuctionServiceBiddingResult_Success_DEFAULT
	}
	return p.Success
}

var AuctionServiceBiddingResult_Ex_DEFAULT *InvalidException

func (p *AuctionServiceBiddingResult) GetEx() *InvalidException {
	if !p.IsSetEx() {
		return AuctionServiceBiddingResult_Ex_DEFAULT
	}
	return p.Ex
}
func (p *AuctionServiceBiddingResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AuctionServiceBiddingResult) IsSetEx() bool {
	return p.Ex != nil
}

func (p *AuctionServiceBiddingResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AuctionServiceBiddingResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &BiddingMsg{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *AuctionServiceBiddingResult) readField1(iprot thrift.TProtocol) error {
	p.Ex = &InvalidException{}
	if err := p.Ex.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ex), err)
	}
	return nil
}

func (p *AuctionServiceBiddingResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("bidding_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AuctionServiceBiddingResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *AuctionServiceBiddingResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetEx() {
		if err := oprot.WriteFieldBegin("ex", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ex: ", p), err)
		}
		if err := p.Ex.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ex), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ex: ", p), err)
		}
	}
	return err
}

func (p *AuctionServiceBiddingResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AuctionServiceBiddingResult(%+v)", *p)
}

// Attributes:
//  - DealerId
//  - OrderId
//  - Price
//  - DeviceType
type AuctionServiceBidArgs struct {
	DealerId   int64   `thrift:"dealerId,1" json:"dealerId"`
	OrderId    int64   `thrift:"orderId,2" json:"orderId"`
	Price      float64 `thrift:"price,3" json:"price"`
	DeviceType int32   `thrift:"deviceType,4" json:"deviceType"`
}

func NewAuctionServiceBidArgs() *AuctionServiceBidArgs {
	return &AuctionServiceBidArgs{}
}

func (p *AuctionServiceBidArgs) GetDealerId() int64 {
	return p.DealerId
}

func (p *AuctionServiceBidArgs) GetOrderId() int64 {
	return p.OrderId
}

func (p *AuctionServiceBidArgs) GetPrice() float64 {
	return p.Price
}

func (p *AuctionServiceBidArgs) GetDeviceType() int32 {
	return p.DeviceType
}
func (p *AuctionServiceBidArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AuctionServiceBidArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.DealerId = v
	}
	return nil
}

func (p *AuctionServiceBidArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.OrderId = v
	}
	return nil
}

func (p *AuctionServiceBidArgs) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Price = v
	}
	return nil
}

func (p *AuctionServiceBidArgs) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.DeviceType = v
	}
	return nil
}

func (p *AuctionServiceBidArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("bid_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AuctionServiceBidArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("dealerId", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:dealerId: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.DealerId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.dealerId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:dealerId: ", p), err)
	}
	return err
}

func (p *AuctionServiceBidArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("orderId", thrift.I64, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:orderId: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.OrderId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.orderId (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:orderId: ", p), err)
	}
	return err
}

func (p *AuctionServiceBidArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("price", thrift.DOUBLE, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:price: ", p), err)
	}
	if err := oprot.WriteDouble(float64(p.Price)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.price (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:price: ", p), err)
	}
	return err
}

func (p *AuctionServiceBidArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("deviceType", thrift.I32, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:deviceType: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.DeviceType)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.deviceType (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:deviceType: ", p), err)
	}
	return err
}

func (p *AuctionServiceBidArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AuctionServiceBidArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ex
type AuctionServiceBidResult struct {
	Success *BidMsg           `thrift:"success,0" json:"success,omitempty"`
	Ex      *InvalidException `thrift:"ex,1" json:"ex,omitempty"`
}

func NewAuctionServiceBidResult() *AuctionServiceBidResult {
	return &AuctionServiceBidResult{}
}

var AuctionServiceBidResult_Success_DEFAULT *BidMsg

func (p *AuctionServiceBidResult) GetSuccess() *BidMsg {
	if !p.IsSetSuccess() {
		return AuctionServiceBidResult_Success_DEFAULT
	}
	return p.Success
}

var AuctionServiceBidResult_Ex_DEFAULT *InvalidException

func (p *AuctionServiceBidResult) GetEx() *InvalidException {
	if !p.IsSetEx() {
		return AuctionServiceBidResult_Ex_DEFAULT
	}
	return p.Ex
}
func (p *AuctionServiceBidResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AuctionServiceBidResult) IsSetEx() bool {
	return p.Ex != nil
}

func (p *AuctionServiceBidResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AuctionServiceBidResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &BidMsg{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *AuctionServiceBidResult) readField1(iprot thrift.TProtocol) error {
	p.Ex = &InvalidException{}
	if err := p.Ex.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ex), err)
	}
	return nil
}

func (p *AuctionServiceBidResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("bid_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AuctionServiceBidResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *AuctionServiceBidResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetEx() {
		if err := oprot.WriteFieldBegin("ex", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ex: ", p), err)
		}
		if err := p.Ex.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ex), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ex: ", p), err)
		}
	}
	return err
}

func (p *AuctionServiceBidResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AuctionServiceBidResult(%+v)", *p)
}

// Attributes:
//  - DealerId
//  - OrderId
type AuctionServiceIntelBidSetArgs struct {
	DealerId int64 `thrift:"dealerId,1" json:"dealerId"`
	OrderId  int64 `thrift:"orderId,2" json:"orderId"`
}

func NewAuctionServiceIntelBidSetArgs() *AuctionServiceIntelBidSetArgs {
	return &AuctionServiceIntelBidSetArgs{}
}

func (p *AuctionServiceIntelBidSetArgs) GetDealerId() int64 {
	return p.DealerId
}

func (p *AuctionServiceIntelBidSetArgs) GetOrderId() int64 {
	return p.OrderId
}
func (p *AuctionServiceIntelBidSetArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AuctionServiceIntelBidSetArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.DealerId = v
	}
	return nil
}

func (p *AuctionServiceIntelBidSetArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.OrderId = v
	}
	return nil
}

func (p *AuctionServiceIntelBidSetArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("intelBidSet_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AuctionServiceIntelBidSetArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("dealerId", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:dealerId: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.DealerId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.dealerId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:dealerId: ", p), err)
	}
	return err
}

func (p *AuctionServiceIntelBidSetArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("orderId", thrift.I64, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:orderId: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.OrderId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.orderId (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:orderId: ", p), err)
	}
	return err
}

func (p *AuctionServiceIntelBidSetArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AuctionServiceIntelBidSetArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ex
type AuctionServiceIntelBidSetResult struct {
	Success *bool             `thrift:"success,0" json:"success,omitempty"`
	Ex      *InvalidException `thrift:"ex,1" json:"ex,omitempty"`
}

func NewAuctionServiceIntelBidSetResult() *AuctionServiceIntelBidSetResult {
	return &AuctionServiceIntelBidSetResult{}
}

var AuctionServiceIntelBidSetResult_Success_DEFAULT bool

func (p *AuctionServiceIntelBidSetResult) GetSuccess() bool {
	if !p.IsSetSuccess() {
		return AuctionServiceIntelBidSetResult_Success_DEFAULT
	}
	return *p.Success
}

var AuctionServiceIntelBidSetResult_Ex_DEFAULT *InvalidException

func (p *AuctionServiceIntelBidSetResult) GetEx() *InvalidException {
	if !p.IsSetEx() {
		return AuctionServiceIntelBidSetResult_Ex_DEFAULT
	}
	return p.Ex
}
func (p *AuctionServiceIntelBidSetResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AuctionServiceIntelBidSetResult) IsSetEx() bool {
	return p.Ex != nil
}

func (p *AuctionServiceIntelBidSetResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AuctionServiceIntelBidSetResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *AuctionServiceIntelBidSetResult) readField1(iprot thrift.TProtocol) error {
	p.Ex = &InvalidException{}
	if err := p.Ex.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ex), err)
	}
	return nil
}

func (p *AuctionServiceIntelBidSetResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("intelBidSet_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AuctionServiceIntelBidSetResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *AuctionServiceIntelBidSetResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetEx() {
		if err := oprot.WriteFieldBegin("ex", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ex: ", p), err)
		}
		if err := p.Ex.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ex), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ex: ", p), err)
		}
	}
	return err
}

func (p *AuctionServiceIntelBidSetResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AuctionServiceIntelBidSetResult(%+v)", *p)
}

// Attributes:
//  - DealerId
//  - OrderId
type AuctionServiceIntelBidStopArgs struct {
	DealerId int64 `thrift:"dealerId,1" json:"dealerId"`
	OrderId  int64 `thrift:"orderId,2" json:"orderId"`
}

func NewAuctionServiceIntelBidStopArgs() *AuctionServiceIntelBidStopArgs {
	return &AuctionServiceIntelBidStopArgs{}
}

func (p *AuctionServiceIntelBidStopArgs) GetDealerId() int64 {
	return p.DealerId
}

func (p *AuctionServiceIntelBidStopArgs) GetOrderId() int64 {
	return p.OrderId
}
func (p *AuctionServiceIntelBidStopArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AuctionServiceIntelBidStopArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.DealerId = v
	}
	return nil
}

func (p *AuctionServiceIntelBidStopArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.OrderId = v
	}
	return nil
}

func (p *AuctionServiceIntelBidStopArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("intelBidStop_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AuctionServiceIntelBidStopArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("dealerId", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:dealerId: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.DealerId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.dealerId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:dealerId: ", p), err)
	}
	return err
}

func (p *AuctionServiceIntelBidStopArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("orderId", thrift.I64, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:orderId: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.OrderId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.orderId (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:orderId: ", p), err)
	}
	return err
}

func (p *AuctionServiceIntelBidStopArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AuctionServiceIntelBidStopArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ex
type AuctionServiceIntelBidStopResult struct {
	Success *bool             `thrift:"success,0" json:"success,omitempty"`
	Ex      *InvalidException `thrift:"ex,1" json:"ex,omitempty"`
}

func NewAuctionServiceIntelBidStopResult() *AuctionServiceIntelBidStopResult {
	return &AuctionServiceIntelBidStopResult{}
}

var AuctionServiceIntelBidStopResult_Success_DEFAULT bool

func (p *AuctionServiceIntelBidStopResult) GetSuccess() bool {
	if !p.IsSetSuccess() {
		return AuctionServiceIntelBidStopResult_Success_DEFAULT
	}
	return *p.Success
}

var AuctionServiceIntelBidStopResult_Ex_DEFAULT *InvalidException

func (p *AuctionServiceIntelBidStopResult) GetEx() *InvalidException {
	if !p.IsSetEx() {
		return AuctionServiceIntelBidStopResult_Ex_DEFAULT
	}
	return p.Ex
}
func (p *AuctionServiceIntelBidStopResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AuctionServiceIntelBidStopResult) IsSetEx() bool {
	return p.Ex != nil
}

func (p *AuctionServiceIntelBidStopResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AuctionServiceIntelBidStopResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *AuctionServiceIntelBidStopResult) readField1(iprot thrift.TProtocol) error {
	p.Ex = &InvalidException{}
	if err := p.Ex.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ex), err)
	}
	return nil
}

func (p *AuctionServiceIntelBidStopResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("intelBidStop_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AuctionServiceIntelBidStopResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *AuctionServiceIntelBidStopResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetEx() {
		if err := oprot.WriteFieldBegin("ex", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ex: ", p), err)
		}
		if err := p.Ex.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ex), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ex: ", p), err)
		}
	}
	return err
}

func (p *AuctionServiceIntelBidStopResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AuctionServiceIntelBidStopResult(%+v)", *p)
}

// Attributes:
//  - DealerId
//  - OrderId
//  - BasePrice
//  - AddPrice
type AuctionServiceIntelBiddingArgs struct {
	DealerId  int64   `thrift:"dealerId,1" json:"dealerId"`
	OrderId   int64   `thrift:"orderId,2" json:"orderId"`
	BasePrice float64 `thrift:"basePrice,3" json:"basePrice"`
	AddPrice  float64 `thrift:"addPrice,4" json:"addPrice"`
}

func NewAuctionServiceIntelBiddingArgs() *AuctionServiceIntelBiddingArgs {
	return &AuctionServiceIntelBiddingArgs{}
}

func (p *AuctionServiceIntelBiddingArgs) GetDealerId() int64 {
	return p.DealerId
}

func (p *AuctionServiceIntelBiddingArgs) GetOrderId() int64 {
	return p.OrderId
}

func (p *AuctionServiceIntelBiddingArgs) GetBasePrice() float64 {
	return p.BasePrice
}

func (p *AuctionServiceIntelBiddingArgs) GetAddPrice() float64 {
	return p.AddPrice
}
func (p *AuctionServiceIntelBiddingArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AuctionServiceIntelBiddingArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.DealerId = v
	}
	return nil
}

func (p *AuctionServiceIntelBiddingArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.OrderId = v
	}
	return nil
}

func (p *AuctionServiceIntelBiddingArgs) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.BasePrice = v
	}
	return nil
}

func (p *AuctionServiceIntelBiddingArgs) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.AddPrice = v
	}
	return nil
}

func (p *AuctionServiceIntelBiddingArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("intelBidding_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AuctionServiceIntelBiddingArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("dealerId", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:dealerId: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.DealerId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.dealerId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:dealerId: ", p), err)
	}
	return err
}

func (p *AuctionServiceIntelBiddingArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("orderId", thrift.I64, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:orderId: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.OrderId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.orderId (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:orderId: ", p), err)
	}
	return err
}

func (p *AuctionServiceIntelBiddingArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("basePrice", thrift.DOUBLE, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:basePrice: ", p), err)
	}
	if err := oprot.WriteDouble(float64(p.BasePrice)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.basePrice (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:basePrice: ", p), err)
	}
	return err
}

func (p *AuctionServiceIntelBiddingArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("addPrice", thrift.DOUBLE, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:addPrice: ", p), err)
	}
	if err := oprot.WriteDouble(float64(p.AddPrice)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.addPrice (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:addPrice: ", p), err)
	}
	return err
}

func (p *AuctionServiceIntelBiddingArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AuctionServiceIntelBiddingArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ex
type AuctionServiceIntelBiddingResult struct {
	Success *bool             `thrift:"success,0" json:"success,omitempty"`
	Ex      *InvalidException `thrift:"ex,1" json:"ex,omitempty"`
}

func NewAuctionServiceIntelBiddingResult() *AuctionServiceIntelBiddingResult {
	return &AuctionServiceIntelBiddingResult{}
}

var AuctionServiceIntelBiddingResult_Success_DEFAULT bool

func (p *AuctionServiceIntelBiddingResult) GetSuccess() bool {
	if !p.IsSetSuccess() {
		return AuctionServiceIntelBiddingResult_Success_DEFAULT
	}
	return *p.Success
}

var AuctionServiceIntelBiddingResult_Ex_DEFAULT *InvalidException

func (p *AuctionServiceIntelBiddingResult) GetEx() *InvalidException {
	if !p.IsSetEx() {
		return AuctionServiceIntelBiddingResult_Ex_DEFAULT
	}
	return p.Ex
}
func (p *AuctionServiceIntelBiddingResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AuctionServiceIntelBiddingResult) IsSetEx() bool {
	return p.Ex != nil
}

func (p *AuctionServiceIntelBiddingResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AuctionServiceIntelBiddingResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *AuctionServiceIntelBiddingResult) readField1(iprot thrift.TProtocol) error {
	p.Ex = &InvalidException{}
	if err := p.Ex.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ex), err)
	}
	return nil
}

func (p *AuctionServiceIntelBiddingResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("intelBidding_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AuctionServiceIntelBiddingResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *AuctionServiceIntelBiddingResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetEx() {
		if err := oprot.WriteFieldBegin("ex", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ex: ", p), err)
		}
		if err := p.Ex.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ex), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ex: ", p), err)
		}
	}
	return err
}

func (p *AuctionServiceIntelBiddingResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AuctionServiceIntelBiddingResult(%+v)", *p)
}
