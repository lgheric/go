// Autogenerated by Thrift Compiler (0.9.3)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package BailService

import (
	"bytes"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

type BailService interface {
	// 获取车商保证金信息
	// @param integer dealerId 车商ID
	// @return Bail
	// @value   code	                 string	 状态码 '000000':正确 >0:错误
	// @value   msg	                     string	 错误描述
	// @value   data	                 string	 返回数据
	// @value   data[bail_amount]	     double	 车商可用保证金
	// @value   data[dealer_id]	         int	 车商ID
	// @value   data[freeze_amount]	     double	 冻结保证金金额
	// @value   data[indemnity_amount]	 double	 累计赔付金额
	// @value   data[minus_amount]	     double	 维保透支金额
	//
	// Parameters:
	//  - DealerId
	GetDealerBail(dealerId int64) (r *Bail, err error)
	// 冻结车商可用保证金
	// @param integer dealerId 车商ID
	// @param double  amount   金额
	// @param integer orderId  拍单ID
	// @return Bail
	// @value   code	                 string	 状态码 '000000':正确 >0:错误
	// @value   msg	                     string	 错误描述
	// @value   data	                 string	 返回数据
	// @value   data[bail_amount]	     double	 车商可用保证金
	// @value   data[dealer_id]	         int	 车商ID
	// @value   data[freeze_amount]	     double	 冻结保证金金额
	// @value   data[indemnity_amount]	 double	 累计赔付金额
	// @value   data[minus_amount]	     double	 维保透支金额
	//
	// Parameters:
	//  - DealerId
	//  - Amount
	//  - OrderId
	FreezeBail(dealerId int64, amount float64, orderId int64) (r *Bail, err error)
	// 解冻车商冻结保证金
	// @param integer dealerId 车商ID
	// @param integer orderId  拍单ID
	// @return Bail
	// @value   code	                 string	 状态码 '000000':正确 >0:错误
	// @value   msg	                     string	 错误描述
	// @value   data	                 string	 返回数据
	// @value   data[bail_amount]	     double	 车商可用保证金
	// @value   data[dealer_id]	         int	 车商ID
	// @value   data[freeze_amount]	     double	 冻结保证金金额
	// @value   data[indemnity_amount]	 double	 累计赔付金额
	// @value   data[minus_amount]	     double	 维保透支金额
	//
	// Parameters:
	//  - DealerId
	//  - OrderId
	UnfreezeBail(dealerId int64, orderId int64) (r *Bail, err error)
	// 扣除可用车商保证金
	// @param integer dealerId   车商ID
	// @param double  amount     金额
	// @param integer useType    类型    仅限(4:提取,5:争议支出,6:违约赔付,8:赔付)
	// @param string  useDetail  备注说明
	// @param integer orderId    订单ID
	// @param integer rechargeMethod  扣除方式
	// @param integer payMentId  付款单ID
	// @param integer collectionId  收款单ID
	// @value   code	                 string	 状态码 '000000':正确 >0:错误
	// @value   msg	                     string	 错误描述
	// @value   data	                 string	 返回数据
	// @value   data[bail_amount]	     double	 车商可用保证金
	// @value   data[dealer_id]	         int	 车商ID
	// @value   data[freeze_amount]	     double	 冻结保证金金额
	// @value   data[indemnity_amount]	 double	 累计赔付金额
	// @value   data[minus_amount]	     double	 维保透支金额
	//
	// Parameters:
	//  - DealerId
	//  - Amount
	//  - UseType
	//  - UseDetail
	//  - OrderId
	//  - RechargeMethod
	//  - PayMentId
	//  - CollectionId
	DecBail(dealerId int64, amount float64, useType int32, useDetail string, orderId int64, rechargeMethod int32, payMentId int64, collectionId int64) (r *Bail, err error)
	// 保证金充值
	// @param integer dealerId       车商ID
	// @param double  amount         金额
	// @param string  useDetail      备注说明
	// @param string  rechargeNo     订单编号
	// @param integer rechargeId     订单ID
	// @param integer rechargeMethod 充值方式  仅限(1:支付宝 , 2:拉卡拉 , 3:线下充值)
	// @param integer collectionId   收款单ID
	// @return Bail
	// @value   code	                 string	 状态码 '000000':正确 >0:错误
	// @value   msg	                     string	 错误描述
	// @value   data	                 string	 返回数据
	// @value   data[bail_amount]	     double	 车商可用保证金
	// @value   data[dealer_id]	         int	 车商ID
	// @value   data[freeze_amount]	     double	 冻结保证金金额
	// @value   data[indemnity_amount]	 double	 累计赔付金额
	// @value   data[minus_amount]	     double	 维保透支金额
	//
	// Parameters:
	//  - DealerId
	//  - Amount
	//  - UseDetail
	//  - RechargeNo
	//  - RechargeId
	//  - RechargeMethod
	//  - CollectionId
	IncBail(dealerId int64, amount float64, useDetail string, rechargeNo string, rechargeId int64, rechargeMethod int32, collectionId int32) (r *Bail, err error)
	// 扣除冻结保证金并解冻冻结保证金
	// @param integer dealerId  车商ID
	// @param double  amount    金额
	// @param integer orderId   订单号
	// @param integer useType   类型
	// @param string useDetail  备注说明
	// @return Bail
	// @value   code	                string	状态码 '000000':正确 >0:错误
	// @value   msg	                    string	错误描述
	// @value   data	                string	返回数据
	// @value   data[bail_amount]	    double	车商可用保证金
	// @value   data[dealer_id]	        int	    车商ID
	// @value   data[freeze_amount]	    double	冻结保证金金额
	// @value   data[indemnity_amount]	double	累计赔付金额
	// @value   data[minus_amount]	    double	维保透支金额
	//
	// Parameters:
	//  - DealerId
	//  - OrderId
	//  - DecAmount
	//  - UseType
	//  - UseDetail
	UnfreezeDecBail(dealerId int64, orderId int64, decAmount float64, useType int32, useDetail string) (r *Bail, err error)
	// 获取保证金使用记录
	// @param integer dealerId   车商ID
	// @param integer useType    使用类型     仅限(1:充值 , 2:冻结出价保证金 , 3:解冻出价保证金 , 4:提取 , 5:争议支出 , 6:违约赔付 , 7:其它 , 8:消费)
	// @param string  useTime    查询时间
	// @param integer page       页数
	// @param integer pageSzie   每页数量
	// @param integer isUnFree 是否冻结中  0 否  1 是
	// @param integer payMethod   充值方式
	// @return  Bail
	// @value   code	            string	状态码 '000000':正确 >0:错误
	// @value   msg	                string	错误描述
	// @value   data	            string	返回数据
	// @value   data[bl_id]	        int	    非业务主键ID
	// @value   data[dealer_id]	    int	    车商ID
	// @value   data[use_time]	    string	交易时间
	// @value   data[use_type]	    int	    交易类型
	// @value   data[use_detail]	string	应用明细
	// @value   data[occur_money]	double	发生金额
	// @value   data[remain_amount]	double	可用金额
	//
	// Parameters:
	//  - DealerId
	//  - UseType
	//  - UseTime
	//  - Page
	//  - PageSize
	//  - IsUnFree
	//  - PayMethod
	GetBailLogsByDealerId(dealerId int64, useType int32, useTime string, page int32, pageSize int32, isUnFree int32, payMethod int32) (r *Bail, err error)
}

type BailServiceClient struct {
	Transport       thrift.TTransport
	ProtocolFactory thrift.TProtocolFactory
	InputProtocol   thrift.TProtocol
	OutputProtocol  thrift.TProtocol
	SeqId           int32
}

func NewBailServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *BailServiceClient {
	return &BailServiceClient{Transport: t,
		ProtocolFactory: f,
		InputProtocol:   f.GetProtocol(t),
		OutputProtocol:  f.GetProtocol(t),
		SeqId:           0,
	}
}

func NewBailServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *BailServiceClient {
	return &BailServiceClient{Transport: t,
		ProtocolFactory: nil,
		InputProtocol:   iprot,
		OutputProtocol:  oprot,
		SeqId:           0,
	}
}

// 获取车商保证金信息
// @param integer dealerId 车商ID
// @return Bail
// @value   code	                 string	 状态码 '000000':正确 >0:错误
// @value   msg	                     string	 错误描述
// @value   data	                 string	 返回数据
// @value   data[bail_amount]	     double	 车商可用保证金
// @value   data[dealer_id]	         int	 车商ID
// @value   data[freeze_amount]	     double	 冻结保证金金额
// @value   data[indemnity_amount]	 double	 累计赔付金额
// @value   data[minus_amount]	     double	 维保透支金额
//
// Parameters:
//  - DealerId
func (p *BailServiceClient) GetDealerBail(dealerId int64) (r *Bail, err error) {
	if err = p.sendGetDealerBail(dealerId); err != nil {
		return
	}
	return p.recvGetDealerBail()
}

func (p *BailServiceClient) sendGetDealerBail(dealerId int64) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getDealerBail", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := BailServiceGetDealerBailArgs{
		DealerId: dealerId,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *BailServiceClient) recvGetDealerBail() (value *Bail, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "getDealerBail" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getDealerBail failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getDealerBail failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error2 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error3 error
		error3, err = error2.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error3
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getDealerBail failed: invalid message type")
		return
	}
	result := BailServiceGetDealerBailResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.Ex != nil {
		err = result.Ex
		return
	}
	value = result.GetSuccess()
	return
}

// 冻结车商可用保证金
// @param integer dealerId 车商ID
// @param double  amount   金额
// @param integer orderId  拍单ID
// @return Bail
// @value   code	                 string	 状态码 '000000':正确 >0:错误
// @value   msg	                     string	 错误描述
// @value   data	                 string	 返回数据
// @value   data[bail_amount]	     double	 车商可用保证金
// @value   data[dealer_id]	         int	 车商ID
// @value   data[freeze_amount]	     double	 冻结保证金金额
// @value   data[indemnity_amount]	 double	 累计赔付金额
// @value   data[minus_amount]	     double	 维保透支金额
//
// Parameters:
//  - DealerId
//  - Amount
//  - OrderId
func (p *BailServiceClient) FreezeBail(dealerId int64, amount float64, orderId int64) (r *Bail, err error) {
	if err = p.sendFreezeBail(dealerId, amount, orderId); err != nil {
		return
	}
	return p.recvFreezeBail()
}

func (p *BailServiceClient) sendFreezeBail(dealerId int64, amount float64, orderId int64) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("freezeBail", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := BailServiceFreezeBailArgs{
		DealerId: dealerId,
		Amount:   amount,
		OrderId:  orderId,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *BailServiceClient) recvFreezeBail() (value *Bail, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "freezeBail" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "freezeBail failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "freezeBail failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error4 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error5 error
		error5, err = error4.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error5
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "freezeBail failed: invalid message type")
		return
	}
	result := BailServiceFreezeBailResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.Ex != nil {
		err = result.Ex
		return
	}
	value = result.GetSuccess()
	return
}

// 解冻车商冻结保证金
// @param integer dealerId 车商ID
// @param integer orderId  拍单ID
// @return Bail
// @value   code	                 string	 状态码 '000000':正确 >0:错误
// @value   msg	                     string	 错误描述
// @value   data	                 string	 返回数据
// @value   data[bail_amount]	     double	 车商可用保证金
// @value   data[dealer_id]	         int	 车商ID
// @value   data[freeze_amount]	     double	 冻结保证金金额
// @value   data[indemnity_amount]	 double	 累计赔付金额
// @value   data[minus_amount]	     double	 维保透支金额
//
// Parameters:
//  - DealerId
//  - OrderId
func (p *BailServiceClient) UnfreezeBail(dealerId int64, orderId int64) (r *Bail, err error) {
	if err = p.sendUnfreezeBail(dealerId, orderId); err != nil {
		return
	}
	return p.recvUnfreezeBail()
}

func (p *BailServiceClient) sendUnfreezeBail(dealerId int64, orderId int64) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("unfreezeBail", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := BailServiceUnfreezeBailArgs{
		DealerId: dealerId,
		OrderId:  orderId,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *BailServiceClient) recvUnfreezeBail() (value *Bail, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "unfreezeBail" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "unfreezeBail failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "unfreezeBail failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error6 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error7 error
		error7, err = error6.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error7
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "unfreezeBail failed: invalid message type")
		return
	}
	result := BailServiceUnfreezeBailResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.Ex != nil {
		err = result.Ex
		return
	}
	value = result.GetSuccess()
	return
}

// 扣除可用车商保证金
// @param integer dealerId   车商ID
// @param double  amount     金额
// @param integer useType    类型    仅限(4:提取,5:争议支出,6:违约赔付,8:赔付)
// @param string  useDetail  备注说明
// @param integer orderId    订单ID
// @param integer rechargeMethod  扣除方式
// @param integer payMentId  付款单ID
// @param integer collectionId  收款单ID
// @value   code	                 string	 状态码 '000000':正确 >0:错误
// @value   msg	                     string	 错误描述
// @value   data	                 string	 返回数据
// @value   data[bail_amount]	     double	 车商可用保证金
// @value   data[dealer_id]	         int	 车商ID
// @value   data[freeze_amount]	     double	 冻结保证金金额
// @value   data[indemnity_amount]	 double	 累计赔付金额
// @value   data[minus_amount]	     double	 维保透支金额
//
// Parameters:
//  - DealerId
//  - Amount
//  - UseType
//  - UseDetail
//  - OrderId
//  - RechargeMethod
//  - PayMentId
//  - CollectionId
func (p *BailServiceClient) DecBail(dealerId int64, amount float64, useType int32, useDetail string, orderId int64, rechargeMethod int32, payMentId int64, collectionId int64) (r *Bail, err error) {
	if err = p.sendDecBail(dealerId, amount, useType, useDetail, orderId, rechargeMethod, payMentId, collectionId); err != nil {
		return
	}
	return p.recvDecBail()
}

func (p *BailServiceClient) sendDecBail(dealerId int64, amount float64, useType int32, useDetail string, orderId int64, rechargeMethod int32, payMentId int64, collectionId int64) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("decBail", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := BailServiceDecBailArgs{
		DealerId:       dealerId,
		Amount:         amount,
		UseType:        useType,
		UseDetail:      useDetail,
		OrderId:        orderId,
		RechargeMethod: rechargeMethod,
		PayMentId:      payMentId,
		CollectionId:   collectionId,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *BailServiceClient) recvDecBail() (value *Bail, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "decBail" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "decBail failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "decBail failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error8 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error9 error
		error9, err = error8.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error9
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "decBail failed: invalid message type")
		return
	}
	result := BailServiceDecBailResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.Ex != nil {
		err = result.Ex
		return
	}
	value = result.GetSuccess()
	return
}

// 保证金充值
// @param integer dealerId       车商ID
// @param double  amount         金额
// @param string  useDetail      备注说明
// @param string  rechargeNo     订单编号
// @param integer rechargeId     订单ID
// @param integer rechargeMethod 充值方式  仅限(1:支付宝 , 2:拉卡拉 , 3:线下充值)
// @param integer collectionId   收款单ID
// @return Bail
// @value   code	                 string	 状态码 '000000':正确 >0:错误
// @value   msg	                     string	 错误描述
// @value   data	                 string	 返回数据
// @value   data[bail_amount]	     double	 车商可用保证金
// @value   data[dealer_id]	         int	 车商ID
// @value   data[freeze_amount]	     double	 冻结保证金金额
// @value   data[indemnity_amount]	 double	 累计赔付金额
// @value   data[minus_amount]	     double	 维保透支金额
//
// Parameters:
//  - DealerId
//  - Amount
//  - UseDetail
//  - RechargeNo
//  - RechargeId
//  - RechargeMethod
//  - CollectionId
func (p *BailServiceClient) IncBail(dealerId int64, amount float64, useDetail string, rechargeNo string, rechargeId int64, rechargeMethod int32, collectionId int32) (r *Bail, err error) {
	if err = p.sendIncBail(dealerId, amount, useDetail, rechargeNo, rechargeId, rechargeMethod, collectionId); err != nil {
		return
	}
	return p.recvIncBail()
}

func (p *BailServiceClient) sendIncBail(dealerId int64, amount float64, useDetail string, rechargeNo string, rechargeId int64, rechargeMethod int32, collectionId int32) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("incBail", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := BailServiceIncBailArgs{
		DealerId:       dealerId,
		Amount:         amount,
		UseDetail:      useDetail,
		RechargeNo:     rechargeNo,
		RechargeId:     rechargeId,
		RechargeMethod: rechargeMethod,
		CollectionId:   collectionId,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *BailServiceClient) recvIncBail() (value *Bail, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "incBail" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "incBail failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "incBail failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error10 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error11 error
		error11, err = error10.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error11
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "incBail failed: invalid message type")
		return
	}
	result := BailServiceIncBailResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.Ex != nil {
		err = result.Ex
		return
	}
	value = result.GetSuccess()
	return
}

// 扣除冻结保证金并解冻冻结保证金
// @param integer dealerId  车商ID
// @param double  amount    金额
// @param integer orderId   订单号
// @param integer useType   类型
// @param string useDetail  备注说明
// @return Bail
// @value   code	                string	状态码 '000000':正确 >0:错误
// @value   msg	                    string	错误描述
// @value   data	                string	返回数据
// @value   data[bail_amount]	    double	车商可用保证金
// @value   data[dealer_id]	        int	    车商ID
// @value   data[freeze_amount]	    double	冻结保证金金额
// @value   data[indemnity_amount]	double	累计赔付金额
// @value   data[minus_amount]	    double	维保透支金额
//
// Parameters:
//  - DealerId
//  - OrderId
//  - DecAmount
//  - UseType
//  - UseDetail
func (p *BailServiceClient) UnfreezeDecBail(dealerId int64, orderId int64, decAmount float64, useType int32, useDetail string) (r *Bail, err error) {
	if err = p.sendUnfreezeDecBail(dealerId, orderId, decAmount, useType, useDetail); err != nil {
		return
	}
	return p.recvUnfreezeDecBail()
}

func (p *BailServiceClient) sendUnfreezeDecBail(dealerId int64, orderId int64, decAmount float64, useType int32, useDetail string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("unfreezeDecBail", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := BailServiceUnfreezeDecBailArgs{
		DealerId:  dealerId,
		OrderId:   orderId,
		DecAmount: decAmount,
		UseType:   useType,
		UseDetail: useDetail,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *BailServiceClient) recvUnfreezeDecBail() (value *Bail, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "unfreezeDecBail" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "unfreezeDecBail failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "unfreezeDecBail failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error12 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error13 error
		error13, err = error12.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error13
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "unfreezeDecBail failed: invalid message type")
		return
	}
	result := BailServiceUnfreezeDecBailResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.Ex != nil {
		err = result.Ex
		return
	}
	value = result.GetSuccess()
	return
}

// 获取保证金使用记录
// @param integer dealerId   车商ID
// @param integer useType    使用类型     仅限(1:充值 , 2:冻结出价保证金 , 3:解冻出价保证金 , 4:提取 , 5:争议支出 , 6:违约赔付 , 7:其它 , 8:消费)
// @param string  useTime    查询时间
// @param integer page       页数
// @param integer pageSzie   每页数量
// @param integer isUnFree 是否冻结中  0 否  1 是
// @param integer payMethod   充值方式
// @return  Bail
// @value   code	            string	状态码 '000000':正确 >0:错误
// @value   msg	                string	错误描述
// @value   data	            string	返回数据
// @value   data[bl_id]	        int	    非业务主键ID
// @value   data[dealer_id]	    int	    车商ID
// @value   data[use_time]	    string	交易时间
// @value   data[use_type]	    int	    交易类型
// @value   data[use_detail]	string	应用明细
// @value   data[occur_money]	double	发生金额
// @value   data[remain_amount]	double	可用金额
//
// Parameters:
//  - DealerId
//  - UseType
//  - UseTime
//  - Page
//  - PageSize
//  - IsUnFree
//  - PayMethod
func (p *BailServiceClient) GetBailLogsByDealerId(dealerId int64, useType int32, useTime string, page int32, pageSize int32, isUnFree int32, payMethod int32) (r *Bail, err error) {
	if err = p.sendGetBailLogsByDealerId(dealerId, useType, useTime, page, pageSize, isUnFree, payMethod); err != nil {
		return
	}
	return p.recvGetBailLogsByDealerId()
}

func (p *BailServiceClient) sendGetBailLogsByDealerId(dealerId int64, useType int32, useTime string, page int32, pageSize int32, isUnFree int32, payMethod int32) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getBailLogsByDealerId", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := BailServiceGetBailLogsByDealerIdArgs{
		DealerId:  dealerId,
		UseType:   useType,
		UseTime:   useTime,
		Page:      page,
		PageSize:  pageSize,
		IsUnFree:  isUnFree,
		PayMethod: payMethod,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *BailServiceClient) recvGetBailLogsByDealerId() (value *Bail, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "getBailLogsByDealerId" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getBailLogsByDealerId failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getBailLogsByDealerId failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error14 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error15 error
		error15, err = error14.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error15
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getBailLogsByDealerId failed: invalid message type")
		return
	}
	result := BailServiceGetBailLogsByDealerIdResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.Ex != nil {
		err = result.Ex
		return
	}
	value = result.GetSuccess()
	return
}

type BailServiceProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      BailService
}

func (p *BailServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *BailServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *BailServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewBailServiceProcessor(handler BailService) *BailServiceProcessor {

	self16 := &BailServiceProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self16.processorMap["getDealerBail"] = &bailServiceProcessorGetDealerBail{handler: handler}
	self16.processorMap["freezeBail"] = &bailServiceProcessorFreezeBail{handler: handler}
	self16.processorMap["unfreezeBail"] = &bailServiceProcessorUnfreezeBail{handler: handler}
	self16.processorMap["decBail"] = &bailServiceProcessorDecBail{handler: handler}
	self16.processorMap["incBail"] = &bailServiceProcessorIncBail{handler: handler}
	self16.processorMap["unfreezeDecBail"] = &bailServiceProcessorUnfreezeDecBail{handler: handler}
	self16.processorMap["getBailLogsByDealerId"] = &bailServiceProcessorGetBailLogsByDealerId{handler: handler}
	return self16
}

func (p *BailServiceProcessor) Process(iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x17 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x17.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return false, x17

}

type bailServiceProcessorGetDealerBail struct {
	handler BailService
}

func (p *bailServiceProcessorGetDealerBail) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := BailServiceGetDealerBailArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getDealerBail", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := BailServiceGetDealerBailResult{}
	var retval *Bail
	var err2 error
	if retval, err2 = p.handler.GetDealerBail(args.DealerId); err2 != nil {
		switch v := err2.(type) {
		case *InvalidException:
			result.Ex = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getDealerBail: "+err2.Error())
			oprot.WriteMessageBegin("getDealerBail", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getDealerBail", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type bailServiceProcessorFreezeBail struct {
	handler BailService
}

func (p *bailServiceProcessorFreezeBail) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := BailServiceFreezeBailArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("freezeBail", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := BailServiceFreezeBailResult{}
	var retval *Bail
	var err2 error
	if retval, err2 = p.handler.FreezeBail(args.DealerId, args.Amount, args.OrderId); err2 != nil {
		switch v := err2.(type) {
		case *InvalidException:
			result.Ex = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing freezeBail: "+err2.Error())
			oprot.WriteMessageBegin("freezeBail", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("freezeBail", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type bailServiceProcessorUnfreezeBail struct {
	handler BailService
}

func (p *bailServiceProcessorUnfreezeBail) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := BailServiceUnfreezeBailArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("unfreezeBail", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := BailServiceUnfreezeBailResult{}
	var retval *Bail
	var err2 error
	if retval, err2 = p.handler.UnfreezeBail(args.DealerId, args.OrderId); err2 != nil {
		switch v := err2.(type) {
		case *InvalidException:
			result.Ex = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing unfreezeBail: "+err2.Error())
			oprot.WriteMessageBegin("unfreezeBail", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("unfreezeBail", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type bailServiceProcessorDecBail struct {
	handler BailService
}

func (p *bailServiceProcessorDecBail) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := BailServiceDecBailArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("decBail", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := BailServiceDecBailResult{}
	var retval *Bail
	var err2 error
	if retval, err2 = p.handler.DecBail(args.DealerId, args.Amount, args.UseType, args.UseDetail, args.OrderId, args.RechargeMethod, args.PayMentId, args.CollectionId); err2 != nil {
		switch v := err2.(type) {
		case *InvalidException:
			result.Ex = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing decBail: "+err2.Error())
			oprot.WriteMessageBegin("decBail", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("decBail", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type bailServiceProcessorIncBail struct {
	handler BailService
}

func (p *bailServiceProcessorIncBail) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := BailServiceIncBailArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("incBail", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := BailServiceIncBailResult{}
	var retval *Bail
	var err2 error
	if retval, err2 = p.handler.IncBail(args.DealerId, args.Amount, args.UseDetail, args.RechargeNo, args.RechargeId, args.RechargeMethod, args.CollectionId); err2 != nil {
		switch v := err2.(type) {
		case *InvalidException:
			result.Ex = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing incBail: "+err2.Error())
			oprot.WriteMessageBegin("incBail", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("incBail", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type bailServiceProcessorUnfreezeDecBail struct {
	handler BailService
}

func (p *bailServiceProcessorUnfreezeDecBail) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := BailServiceUnfreezeDecBailArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("unfreezeDecBail", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := BailServiceUnfreezeDecBailResult{}
	var retval *Bail
	var err2 error
	if retval, err2 = p.handler.UnfreezeDecBail(args.DealerId, args.OrderId, args.DecAmount, args.UseType, args.UseDetail); err2 != nil {
		switch v := err2.(type) {
		case *InvalidException:
			result.Ex = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing unfreezeDecBail: "+err2.Error())
			oprot.WriteMessageBegin("unfreezeDecBail", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("unfreezeDecBail", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type bailServiceProcessorGetBailLogsByDealerId struct {
	handler BailService
}

func (p *bailServiceProcessorGetBailLogsByDealerId) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := BailServiceGetBailLogsByDealerIdArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getBailLogsByDealerId", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := BailServiceGetBailLogsByDealerIdResult{}
	var retval *Bail
	var err2 error
	if retval, err2 = p.handler.GetBailLogsByDealerId(args.DealerId, args.UseType, args.UseTime, args.Page, args.PageSize, args.IsUnFree, args.PayMethod); err2 != nil {
		switch v := err2.(type) {
		case *InvalidException:
			result.Ex = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getBailLogsByDealerId: "+err2.Error())
			oprot.WriteMessageBegin("getBailLogsByDealerId", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getBailLogsByDealerId", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - DealerId
type BailServiceGetDealerBailArgs struct {
	DealerId int64 `thrift:"dealerId,1" json:"dealerId"`
}

func NewBailServiceGetDealerBailArgs() *BailServiceGetDealerBailArgs {
	return &BailServiceGetDealerBailArgs{}
}

func (p *BailServiceGetDealerBailArgs) GetDealerId() int64 {
	return p.DealerId
}
func (p *BailServiceGetDealerBailArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *BailServiceGetDealerBailArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.DealerId = v
	}
	return nil
}

func (p *BailServiceGetDealerBailArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getDealerBail_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *BailServiceGetDealerBailArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("dealerId", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:dealerId: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.DealerId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.dealerId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:dealerId: ", p), err)
	}
	return err
}

func (p *BailServiceGetDealerBailArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BailServiceGetDealerBailArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ex
type BailServiceGetDealerBailResult struct {
	Success *Bail             `thrift:"success,0" json:"success,omitempty"`
	Ex      *InvalidException `thrift:"ex,1" json:"ex,omitempty"`
}

func NewBailServiceGetDealerBailResult() *BailServiceGetDealerBailResult {
	return &BailServiceGetDealerBailResult{}
}

var BailServiceGetDealerBailResult_Success_DEFAULT *Bail

func (p *BailServiceGetDealerBailResult) GetSuccess() *Bail {
	if !p.IsSetSuccess() {
		return BailServiceGetDealerBailResult_Success_DEFAULT
	}
	return p.Success
}

var BailServiceGetDealerBailResult_Ex_DEFAULT *InvalidException

func (p *BailServiceGetDealerBailResult) GetEx() *InvalidException {
	if !p.IsSetEx() {
		return BailServiceGetDealerBailResult_Ex_DEFAULT
	}
	return p.Ex
}
func (p *BailServiceGetDealerBailResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *BailServiceGetDealerBailResult) IsSetEx() bool {
	return p.Ex != nil
}

func (p *BailServiceGetDealerBailResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *BailServiceGetDealerBailResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &Bail{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *BailServiceGetDealerBailResult) readField1(iprot thrift.TProtocol) error {
	p.Ex = &InvalidException{}
	if err := p.Ex.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ex), err)
	}
	return nil
}

func (p *BailServiceGetDealerBailResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getDealerBail_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *BailServiceGetDealerBailResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *BailServiceGetDealerBailResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetEx() {
		if err := oprot.WriteFieldBegin("ex", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ex: ", p), err)
		}
		if err := p.Ex.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ex), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ex: ", p), err)
		}
	}
	return err
}

func (p *BailServiceGetDealerBailResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BailServiceGetDealerBailResult(%+v)", *p)
}

// Attributes:
//  - DealerId
//  - Amount
//  - OrderId
type BailServiceFreezeBailArgs struct {
	DealerId int64   `thrift:"dealerId,1" json:"dealerId"`
	Amount   float64 `thrift:"amount,2" json:"amount"`
	OrderId  int64   `thrift:"orderId,3" json:"orderId"`
}

func NewBailServiceFreezeBailArgs() *BailServiceFreezeBailArgs {
	return &BailServiceFreezeBailArgs{}
}

func (p *BailServiceFreezeBailArgs) GetDealerId() int64 {
	return p.DealerId
}

func (p *BailServiceFreezeBailArgs) GetAmount() float64 {
	return p.Amount
}

func (p *BailServiceFreezeBailArgs) GetOrderId() int64 {
	return p.OrderId
}
func (p *BailServiceFreezeBailArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *BailServiceFreezeBailArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.DealerId = v
	}
	return nil
}

func (p *BailServiceFreezeBailArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Amount = v
	}
	return nil
}

func (p *BailServiceFreezeBailArgs) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.OrderId = v
	}
	return nil
}

func (p *BailServiceFreezeBailArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("freezeBail_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *BailServiceFreezeBailArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("dealerId", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:dealerId: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.DealerId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.dealerId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:dealerId: ", p), err)
	}
	return err
}

func (p *BailServiceFreezeBailArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("amount", thrift.DOUBLE, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:amount: ", p), err)
	}
	if err := oprot.WriteDouble(float64(p.Amount)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.amount (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:amount: ", p), err)
	}
	return err
}

func (p *BailServiceFreezeBailArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("orderId", thrift.I64, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:orderId: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.OrderId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.orderId (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:orderId: ", p), err)
	}
	return err
}

func (p *BailServiceFreezeBailArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BailServiceFreezeBailArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ex
type BailServiceFreezeBailResult struct {
	Success *Bail             `thrift:"success,0" json:"success,omitempty"`
	Ex      *InvalidException `thrift:"ex,1" json:"ex,omitempty"`
}

func NewBailServiceFreezeBailResult() *BailServiceFreezeBailResult {
	return &BailServiceFreezeBailResult{}
}

var BailServiceFreezeBailResult_Success_DEFAULT *Bail

func (p *BailServiceFreezeBailResult) GetSuccess() *Bail {
	if !p.IsSetSuccess() {
		return BailServiceFreezeBailResult_Success_DEFAULT
	}
	return p.Success
}

var BailServiceFreezeBailResult_Ex_DEFAULT *InvalidException

func (p *BailServiceFreezeBailResult) GetEx() *InvalidException {
	if !p.IsSetEx() {
		return BailServiceFreezeBailResult_Ex_DEFAULT
	}
	return p.Ex
}
func (p *BailServiceFreezeBailResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *BailServiceFreezeBailResult) IsSetEx() bool {
	return p.Ex != nil
}

func (p *BailServiceFreezeBailResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *BailServiceFreezeBailResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &Bail{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *BailServiceFreezeBailResult) readField1(iprot thrift.TProtocol) error {
	p.Ex = &InvalidException{}
	if err := p.Ex.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ex), err)
	}
	return nil
}

func (p *BailServiceFreezeBailResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("freezeBail_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *BailServiceFreezeBailResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *BailServiceFreezeBailResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetEx() {
		if err := oprot.WriteFieldBegin("ex", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ex: ", p), err)
		}
		if err := p.Ex.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ex), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ex: ", p), err)
		}
	}
	return err
}

func (p *BailServiceFreezeBailResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BailServiceFreezeBailResult(%+v)", *p)
}

// Attributes:
//  - DealerId
//  - OrderId
type BailServiceUnfreezeBailArgs struct {
	DealerId int64 `thrift:"dealerId,1" json:"dealerId"`
	OrderId  int64 `thrift:"orderId,2" json:"orderId"`
}

func NewBailServiceUnfreezeBailArgs() *BailServiceUnfreezeBailArgs {
	return &BailServiceUnfreezeBailArgs{}
}

func (p *BailServiceUnfreezeBailArgs) GetDealerId() int64 {
	return p.DealerId
}

func (p *BailServiceUnfreezeBailArgs) GetOrderId() int64 {
	return p.OrderId
}
func (p *BailServiceUnfreezeBailArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *BailServiceUnfreezeBailArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.DealerId = v
	}
	return nil
}

func (p *BailServiceUnfreezeBailArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.OrderId = v
	}
	return nil
}

func (p *BailServiceUnfreezeBailArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("unfreezeBail_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *BailServiceUnfreezeBailArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("dealerId", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:dealerId: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.DealerId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.dealerId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:dealerId: ", p), err)
	}
	return err
}

func (p *BailServiceUnfreezeBailArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("orderId", thrift.I64, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:orderId: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.OrderId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.orderId (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:orderId: ", p), err)
	}
	return err
}

func (p *BailServiceUnfreezeBailArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BailServiceUnfreezeBailArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ex
type BailServiceUnfreezeBailResult struct {
	Success *Bail             `thrift:"success,0" json:"success,omitempty"`
	Ex      *InvalidException `thrift:"ex,1" json:"ex,omitempty"`
}

func NewBailServiceUnfreezeBailResult() *BailServiceUnfreezeBailResult {
	return &BailServiceUnfreezeBailResult{}
}

var BailServiceUnfreezeBailResult_Success_DEFAULT *Bail

func (p *BailServiceUnfreezeBailResult) GetSuccess() *Bail {
	if !p.IsSetSuccess() {
		return BailServiceUnfreezeBailResult_Success_DEFAULT
	}
	return p.Success
}

var BailServiceUnfreezeBailResult_Ex_DEFAULT *InvalidException

func (p *BailServiceUnfreezeBailResult) GetEx() *InvalidException {
	if !p.IsSetEx() {
		return BailServiceUnfreezeBailResult_Ex_DEFAULT
	}
	return p.Ex
}
func (p *BailServiceUnfreezeBailResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *BailServiceUnfreezeBailResult) IsSetEx() bool {
	return p.Ex != nil
}

func (p *BailServiceUnfreezeBailResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *BailServiceUnfreezeBailResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &Bail{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *BailServiceUnfreezeBailResult) readField1(iprot thrift.TProtocol) error {
	p.Ex = &InvalidException{}
	if err := p.Ex.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ex), err)
	}
	return nil
}

func (p *BailServiceUnfreezeBailResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("unfreezeBail_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *BailServiceUnfreezeBailResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *BailServiceUnfreezeBailResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetEx() {
		if err := oprot.WriteFieldBegin("ex", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ex: ", p), err)
		}
		if err := p.Ex.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ex), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ex: ", p), err)
		}
	}
	return err
}

func (p *BailServiceUnfreezeBailResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BailServiceUnfreezeBailResult(%+v)", *p)
}

// Attributes:
//  - DealerId
//  - Amount
//  - UseType
//  - UseDetail
//  - OrderId
//  - RechargeMethod
//  - PayMentId
//  - CollectionId
type BailServiceDecBailArgs struct {
	DealerId       int64   `thrift:"dealerId,1" json:"dealerId"`
	Amount         float64 `thrift:"amount,2" json:"amount"`
	UseType        int32   `thrift:"useType,3" json:"useType"`
	UseDetail      string  `thrift:"useDetail,4" json:"useDetail"`
	OrderId        int64   `thrift:"orderId,5" json:"orderId"`
	RechargeMethod int32   `thrift:"rechargeMethod,6" json:"rechargeMethod"`
	PayMentId      int64   `thrift:"payMentId,7" json:"payMentId"`
	CollectionId   int64   `thrift:"collectionId,8" json:"collectionId"`
}

func NewBailServiceDecBailArgs() *BailServiceDecBailArgs {
	return &BailServiceDecBailArgs{}
}

func (p *BailServiceDecBailArgs) GetDealerId() int64 {
	return p.DealerId
}

func (p *BailServiceDecBailArgs) GetAmount() float64 {
	return p.Amount
}

func (p *BailServiceDecBailArgs) GetUseType() int32 {
	return p.UseType
}

func (p *BailServiceDecBailArgs) GetUseDetail() string {
	return p.UseDetail
}

func (p *BailServiceDecBailArgs) GetOrderId() int64 {
	return p.OrderId
}

func (p *BailServiceDecBailArgs) GetRechargeMethod() int32 {
	return p.RechargeMethod
}

func (p *BailServiceDecBailArgs) GetPayMentId() int64 {
	return p.PayMentId
}

func (p *BailServiceDecBailArgs) GetCollectionId() int64 {
	return p.CollectionId
}
func (p *BailServiceDecBailArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.readField8(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *BailServiceDecBailArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.DealerId = v
	}
	return nil
}

func (p *BailServiceDecBailArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Amount = v
	}
	return nil
}

func (p *BailServiceDecBailArgs) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.UseType = v
	}
	return nil
}

func (p *BailServiceDecBailArgs) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.UseDetail = v
	}
	return nil
}

func (p *BailServiceDecBailArgs) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.OrderId = v
	}
	return nil
}

func (p *BailServiceDecBailArgs) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.RechargeMethod = v
	}
	return nil
}

func (p *BailServiceDecBailArgs) readField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.PayMentId = v
	}
	return nil
}

func (p *BailServiceDecBailArgs) readField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 8: ", err)
	} else {
		p.CollectionId = v
	}
	return nil
}

func (p *BailServiceDecBailArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("decBail_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *BailServiceDecBailArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("dealerId", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:dealerId: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.DealerId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.dealerId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:dealerId: ", p), err)
	}
	return err
}

func (p *BailServiceDecBailArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("amount", thrift.DOUBLE, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:amount: ", p), err)
	}
	if err := oprot.WriteDouble(float64(p.Amount)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.amount (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:amount: ", p), err)
	}
	return err
}

func (p *BailServiceDecBailArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("useType", thrift.I32, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:useType: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.UseType)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.useType (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:useType: ", p), err)
	}
	return err
}

func (p *BailServiceDecBailArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("useDetail", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:useDetail: ", p), err)
	}
	if err := oprot.WriteString(string(p.UseDetail)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.useDetail (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:useDetail: ", p), err)
	}
	return err
}

func (p *BailServiceDecBailArgs) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("orderId", thrift.I64, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:orderId: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.OrderId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.orderId (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:orderId: ", p), err)
	}
	return err
}

func (p *BailServiceDecBailArgs) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("rechargeMethod", thrift.I32, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:rechargeMethod: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.RechargeMethod)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.rechargeMethod (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:rechargeMethod: ", p), err)
	}
	return err
}

func (p *BailServiceDecBailArgs) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("payMentId", thrift.I64, 7); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:payMentId: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.PayMentId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.payMentId (7) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 7:payMentId: ", p), err)
	}
	return err
}

func (p *BailServiceDecBailArgs) writeField8(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("collectionId", thrift.I64, 8); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:collectionId: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.CollectionId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.collectionId (8) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 8:collectionId: ", p), err)
	}
	return err
}

func (p *BailServiceDecBailArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BailServiceDecBailArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ex
type BailServiceDecBailResult struct {
	Success *Bail             `thrift:"success,0" json:"success,omitempty"`
	Ex      *InvalidException `thrift:"ex,1" json:"ex,omitempty"`
}

func NewBailServiceDecBailResult() *BailServiceDecBailResult {
	return &BailServiceDecBailResult{}
}

var BailServiceDecBailResult_Success_DEFAULT *Bail

func (p *BailServiceDecBailResult) GetSuccess() *Bail {
	if !p.IsSetSuccess() {
		return BailServiceDecBailResult_Success_DEFAULT
	}
	return p.Success
}

var BailServiceDecBailResult_Ex_DEFAULT *InvalidException

func (p *BailServiceDecBailResult) GetEx() *InvalidException {
	if !p.IsSetEx() {
		return BailServiceDecBailResult_Ex_DEFAULT
	}
	return p.Ex
}
func (p *BailServiceDecBailResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *BailServiceDecBailResult) IsSetEx() bool {
	return p.Ex != nil
}

func (p *BailServiceDecBailResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *BailServiceDecBailResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &Bail{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *BailServiceDecBailResult) readField1(iprot thrift.TProtocol) error {
	p.Ex = &InvalidException{}
	if err := p.Ex.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ex), err)
	}
	return nil
}

func (p *BailServiceDecBailResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("decBail_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *BailServiceDecBailResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *BailServiceDecBailResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetEx() {
		if err := oprot.WriteFieldBegin("ex", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ex: ", p), err)
		}
		if err := p.Ex.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ex), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ex: ", p), err)
		}
	}
	return err
}

func (p *BailServiceDecBailResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BailServiceDecBailResult(%+v)", *p)
}

// Attributes:
//  - DealerId
//  - Amount
//  - UseDetail
//  - RechargeNo
//  - RechargeId
//  - RechargeMethod
//  - CollectionId
type BailServiceIncBailArgs struct {
	DealerId       int64   `thrift:"dealerId,1" json:"dealerId"`
	Amount         float64 `thrift:"amount,2" json:"amount"`
	UseDetail      string  `thrift:"useDetail,3" json:"useDetail"`
	RechargeNo     string  `thrift:"rechargeNo,4" json:"rechargeNo"`
	RechargeId     int64   `thrift:"rechargeId,5" json:"rechargeId"`
	RechargeMethod int32   `thrift:"rechargeMethod,6" json:"rechargeMethod"`
	CollectionId   int32   `thrift:"collectionId,7" json:"collectionId"`
}

func NewBailServiceIncBailArgs() *BailServiceIncBailArgs {
	return &BailServiceIncBailArgs{}
}

func (p *BailServiceIncBailArgs) GetDealerId() int64 {
	return p.DealerId
}

func (p *BailServiceIncBailArgs) GetAmount() float64 {
	return p.Amount
}

func (p *BailServiceIncBailArgs) GetUseDetail() string {
	return p.UseDetail
}

func (p *BailServiceIncBailArgs) GetRechargeNo() string {
	return p.RechargeNo
}

func (p *BailServiceIncBailArgs) GetRechargeId() int64 {
	return p.RechargeId
}

func (p *BailServiceIncBailArgs) GetRechargeMethod() int32 {
	return p.RechargeMethod
}

func (p *BailServiceIncBailArgs) GetCollectionId() int32 {
	return p.CollectionId
}
func (p *BailServiceIncBailArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *BailServiceIncBailArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.DealerId = v
	}
	return nil
}

func (p *BailServiceIncBailArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Amount = v
	}
	return nil
}

func (p *BailServiceIncBailArgs) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.UseDetail = v
	}
	return nil
}

func (p *BailServiceIncBailArgs) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.RechargeNo = v
	}
	return nil
}

func (p *BailServiceIncBailArgs) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.RechargeId = v
	}
	return nil
}

func (p *BailServiceIncBailArgs) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.RechargeMethod = v
	}
	return nil
}

func (p *BailServiceIncBailArgs) readField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.CollectionId = v
	}
	return nil
}

func (p *BailServiceIncBailArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("incBail_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *BailServiceIncBailArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("dealerId", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:dealerId: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.DealerId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.dealerId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:dealerId: ", p), err)
	}
	return err
}

func (p *BailServiceIncBailArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("amount", thrift.DOUBLE, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:amount: ", p), err)
	}
	if err := oprot.WriteDouble(float64(p.Amount)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.amount (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:amount: ", p), err)
	}
	return err
}

func (p *BailServiceIncBailArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("useDetail", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:useDetail: ", p), err)
	}
	if err := oprot.WriteString(string(p.UseDetail)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.useDetail (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:useDetail: ", p), err)
	}
	return err
}

func (p *BailServiceIncBailArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("rechargeNo", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:rechargeNo: ", p), err)
	}
	if err := oprot.WriteString(string(p.RechargeNo)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.rechargeNo (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:rechargeNo: ", p), err)
	}
	return err
}

func (p *BailServiceIncBailArgs) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("rechargeId", thrift.I64, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:rechargeId: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.RechargeId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.rechargeId (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:rechargeId: ", p), err)
	}
	return err
}

func (p *BailServiceIncBailArgs) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("rechargeMethod", thrift.I32, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:rechargeMethod: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.RechargeMethod)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.rechargeMethod (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:rechargeMethod: ", p), err)
	}
	return err
}

func (p *BailServiceIncBailArgs) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("collectionId", thrift.I32, 7); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:collectionId: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.CollectionId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.collectionId (7) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 7:collectionId: ", p), err)
	}
	return err
}

func (p *BailServiceIncBailArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BailServiceIncBailArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ex
type BailServiceIncBailResult struct {
	Success *Bail             `thrift:"success,0" json:"success,omitempty"`
	Ex      *InvalidException `thrift:"ex,1" json:"ex,omitempty"`
}

func NewBailServiceIncBailResult() *BailServiceIncBailResult {
	return &BailServiceIncBailResult{}
}

var BailServiceIncBailResult_Success_DEFAULT *Bail

func (p *BailServiceIncBailResult) GetSuccess() *Bail {
	if !p.IsSetSuccess() {
		return BailServiceIncBailResult_Success_DEFAULT
	}
	return p.Success
}

var BailServiceIncBailResult_Ex_DEFAULT *InvalidException

func (p *BailServiceIncBailResult) GetEx() *InvalidException {
	if !p.IsSetEx() {
		return BailServiceIncBailResult_Ex_DEFAULT
	}
	return p.Ex
}
func (p *BailServiceIncBailResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *BailServiceIncBailResult) IsSetEx() bool {
	return p.Ex != nil
}

func (p *BailServiceIncBailResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *BailServiceIncBailResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &Bail{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *BailServiceIncBailResult) readField1(iprot thrift.TProtocol) error {
	p.Ex = &InvalidException{}
	if err := p.Ex.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ex), err)
	}
	return nil
}

func (p *BailServiceIncBailResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("incBail_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *BailServiceIncBailResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *BailServiceIncBailResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetEx() {
		if err := oprot.WriteFieldBegin("ex", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ex: ", p), err)
		}
		if err := p.Ex.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ex), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ex: ", p), err)
		}
	}
	return err
}

func (p *BailServiceIncBailResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BailServiceIncBailResult(%+v)", *p)
}

// Attributes:
//  - DealerId
//  - OrderId
//  - DecAmount
//  - UseType
//  - UseDetail
type BailServiceUnfreezeDecBailArgs struct {
	DealerId  int64   `thrift:"dealerId,1" json:"dealerId"`
	OrderId   int64   `thrift:"orderId,2" json:"orderId"`
	DecAmount float64 `thrift:"decAmount,3" json:"decAmount"`
	UseType   int32   `thrift:"useType,4" json:"useType"`
	UseDetail string  `thrift:"useDetail,5" json:"useDetail"`
}

func NewBailServiceUnfreezeDecBailArgs() *BailServiceUnfreezeDecBailArgs {
	return &BailServiceUnfreezeDecBailArgs{}
}

func (p *BailServiceUnfreezeDecBailArgs) GetDealerId() int64 {
	return p.DealerId
}

func (p *BailServiceUnfreezeDecBailArgs) GetOrderId() int64 {
	return p.OrderId
}

func (p *BailServiceUnfreezeDecBailArgs) GetDecAmount() float64 {
	return p.DecAmount
}

func (p *BailServiceUnfreezeDecBailArgs) GetUseType() int32 {
	return p.UseType
}

func (p *BailServiceUnfreezeDecBailArgs) GetUseDetail() string {
	return p.UseDetail
}
func (p *BailServiceUnfreezeDecBailArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *BailServiceUnfreezeDecBailArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.DealerId = v
	}
	return nil
}

func (p *BailServiceUnfreezeDecBailArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.OrderId = v
	}
	return nil
}

func (p *BailServiceUnfreezeDecBailArgs) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.DecAmount = v
	}
	return nil
}

func (p *BailServiceUnfreezeDecBailArgs) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.UseType = v
	}
	return nil
}

func (p *BailServiceUnfreezeDecBailArgs) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.UseDetail = v
	}
	return nil
}

func (p *BailServiceUnfreezeDecBailArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("unfreezeDecBail_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *BailServiceUnfreezeDecBailArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("dealerId", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:dealerId: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.DealerId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.dealerId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:dealerId: ", p), err)
	}
	return err
}

func (p *BailServiceUnfreezeDecBailArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("orderId", thrift.I64, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:orderId: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.OrderId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.orderId (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:orderId: ", p), err)
	}
	return err
}

func (p *BailServiceUnfreezeDecBailArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("decAmount", thrift.DOUBLE, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:decAmount: ", p), err)
	}
	if err := oprot.WriteDouble(float64(p.DecAmount)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.decAmount (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:decAmount: ", p), err)
	}
	return err
}

func (p *BailServiceUnfreezeDecBailArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("useType", thrift.I32, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:useType: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.UseType)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.useType (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:useType: ", p), err)
	}
	return err
}

func (p *BailServiceUnfreezeDecBailArgs) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("useDetail", thrift.STRING, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:useDetail: ", p), err)
	}
	if err := oprot.WriteString(string(p.UseDetail)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.useDetail (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:useDetail: ", p), err)
	}
	return err
}

func (p *BailServiceUnfreezeDecBailArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BailServiceUnfreezeDecBailArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ex
type BailServiceUnfreezeDecBailResult struct {
	Success *Bail             `thrift:"success,0" json:"success,omitempty"`
	Ex      *InvalidException `thrift:"ex,1" json:"ex,omitempty"`
}

func NewBailServiceUnfreezeDecBailResult() *BailServiceUnfreezeDecBailResult {
	return &BailServiceUnfreezeDecBailResult{}
}

var BailServiceUnfreezeDecBailResult_Success_DEFAULT *Bail

func (p *BailServiceUnfreezeDecBailResult) GetSuccess() *Bail {
	if !p.IsSetSuccess() {
		return BailServiceUnfreezeDecBailResult_Success_DEFAULT
	}
	return p.Success
}

var BailServiceUnfreezeDecBailResult_Ex_DEFAULT *InvalidException

func (p *BailServiceUnfreezeDecBailResult) GetEx() *InvalidException {
	if !p.IsSetEx() {
		return BailServiceUnfreezeDecBailResult_Ex_DEFAULT
	}
	return p.Ex
}
func (p *BailServiceUnfreezeDecBailResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *BailServiceUnfreezeDecBailResult) IsSetEx() bool {
	return p.Ex != nil
}

func (p *BailServiceUnfreezeDecBailResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *BailServiceUnfreezeDecBailResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &Bail{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *BailServiceUnfreezeDecBailResult) readField1(iprot thrift.TProtocol) error {
	p.Ex = &InvalidException{}
	if err := p.Ex.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ex), err)
	}
	return nil
}

func (p *BailServiceUnfreezeDecBailResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("unfreezeDecBail_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *BailServiceUnfreezeDecBailResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *BailServiceUnfreezeDecBailResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetEx() {
		if err := oprot.WriteFieldBegin("ex", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ex: ", p), err)
		}
		if err := p.Ex.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ex), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ex: ", p), err)
		}
	}
	return err
}

func (p *BailServiceUnfreezeDecBailResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BailServiceUnfreezeDecBailResult(%+v)", *p)
}

// Attributes:
//  - DealerId
//  - UseType
//  - UseTime
//  - Page
//  - PageSize
//  - IsUnFree
//  - PayMethod
type BailServiceGetBailLogsByDealerIdArgs struct {
	DealerId  int64  `thrift:"dealerId,1" json:"dealerId"`
	UseType   int32  `thrift:"useType,2" json:"useType"`
	UseTime   string `thrift:"useTime,3" json:"useTime"`
	Page      int32  `thrift:"page,4" json:"page"`
	PageSize  int32  `thrift:"pageSize,5" json:"pageSize"`
	IsUnFree  int32  `thrift:"isUnFree,6" json:"isUnFree"`
	PayMethod int32  `thrift:"payMethod,7" json:"payMethod"`
}

func NewBailServiceGetBailLogsByDealerIdArgs() *BailServiceGetBailLogsByDealerIdArgs {
	return &BailServiceGetBailLogsByDealerIdArgs{}
}

func (p *BailServiceGetBailLogsByDealerIdArgs) GetDealerId() int64 {
	return p.DealerId
}

func (p *BailServiceGetBailLogsByDealerIdArgs) GetUseType() int32 {
	return p.UseType
}

func (p *BailServiceGetBailLogsByDealerIdArgs) GetUseTime() string {
	return p.UseTime
}

func (p *BailServiceGetBailLogsByDealerIdArgs) GetPage() int32 {
	return p.Page
}

func (p *BailServiceGetBailLogsByDealerIdArgs) GetPageSize() int32 {
	return p.PageSize
}

func (p *BailServiceGetBailLogsByDealerIdArgs) GetIsUnFree() int32 {
	return p.IsUnFree
}

func (p *BailServiceGetBailLogsByDealerIdArgs) GetPayMethod() int32 {
	return p.PayMethod
}
func (p *BailServiceGetBailLogsByDealerIdArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *BailServiceGetBailLogsByDealerIdArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.DealerId = v
	}
	return nil
}

func (p *BailServiceGetBailLogsByDealerIdArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.UseType = v
	}
	return nil
}

func (p *BailServiceGetBailLogsByDealerIdArgs) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.UseTime = v
	}
	return nil
}

func (p *BailServiceGetBailLogsByDealerIdArgs) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Page = v
	}
	return nil
}

func (p *BailServiceGetBailLogsByDealerIdArgs) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.PageSize = v
	}
	return nil
}

func (p *BailServiceGetBailLogsByDealerIdArgs) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.IsUnFree = v
	}
	return nil
}

func (p *BailServiceGetBailLogsByDealerIdArgs) readField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.PayMethod = v
	}
	return nil
}

func (p *BailServiceGetBailLogsByDealerIdArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getBailLogsByDealerId_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *BailServiceGetBailLogsByDealerIdArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("dealerId", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:dealerId: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.DealerId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.dealerId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:dealerId: ", p), err)
	}
	return err
}

func (p *BailServiceGetBailLogsByDealerIdArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("useType", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:useType: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.UseType)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.useType (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:useType: ", p), err)
	}
	return err
}

func (p *BailServiceGetBailLogsByDealerIdArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("useTime", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:useTime: ", p), err)
	}
	if err := oprot.WriteString(string(p.UseTime)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.useTime (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:useTime: ", p), err)
	}
	return err
}

func (p *BailServiceGetBailLogsByDealerIdArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("page", thrift.I32, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:page: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Page)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.page (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:page: ", p), err)
	}
	return err
}

func (p *BailServiceGetBailLogsByDealerIdArgs) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("pageSize", thrift.I32, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:pageSize: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.PageSize)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.pageSize (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:pageSize: ", p), err)
	}
	return err
}

func (p *BailServiceGetBailLogsByDealerIdArgs) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("isUnFree", thrift.I32, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:isUnFree: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.IsUnFree)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.isUnFree (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:isUnFree: ", p), err)
	}
	return err
}

func (p *BailServiceGetBailLogsByDealerIdArgs) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("payMethod", thrift.I32, 7); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:payMethod: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.PayMethod)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.payMethod (7) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 7:payMethod: ", p), err)
	}
	return err
}

func (p *BailServiceGetBailLogsByDealerIdArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BailServiceGetBailLogsByDealerIdArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ex
type BailServiceGetBailLogsByDealerIdResult struct {
	Success *Bail             `thrift:"success,0" json:"success,omitempty"`
	Ex      *InvalidException `thrift:"ex,1" json:"ex,omitempty"`
}

func NewBailServiceGetBailLogsByDealerIdResult() *BailServiceGetBailLogsByDealerIdResult {
	return &BailServiceGetBailLogsByDealerIdResult{}
}

var BailServiceGetBailLogsByDealerIdResult_Success_DEFAULT *Bail

func (p *BailServiceGetBailLogsByDealerIdResult) GetSuccess() *Bail {
	if !p.IsSetSuccess() {
		return BailServiceGetBailLogsByDealerIdResult_Success_DEFAULT
	}
	return p.Success
}

var BailServiceGetBailLogsByDealerIdResult_Ex_DEFAULT *InvalidException

func (p *BailServiceGetBailLogsByDealerIdResult) GetEx() *InvalidException {
	if !p.IsSetEx() {
		return BailServiceGetBailLogsByDealerIdResult_Ex_DEFAULT
	}
	return p.Ex
}
func (p *BailServiceGetBailLogsByDealerIdResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *BailServiceGetBailLogsByDealerIdResult) IsSetEx() bool {
	return p.Ex != nil
}

func (p *BailServiceGetBailLogsByDealerIdResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *BailServiceGetBailLogsByDealerIdResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &Bail{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *BailServiceGetBailLogsByDealerIdResult) readField1(iprot thrift.TProtocol) error {
	p.Ex = &InvalidException{}
	if err := p.Ex.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ex), err)
	}
	return nil
}

func (p *BailServiceGetBailLogsByDealerIdResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getBailLogsByDealerId_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *BailServiceGetBailLogsByDealerIdResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *BailServiceGetBailLogsByDealerIdResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetEx() {
		if err := oprot.WriteFieldBegin("ex", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ex: ", p), err)
		}
		if err := p.Ex.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ex), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ex: ", p), err)
		}
	}
	return err
}

func (p *BailServiceGetBailLogsByDealerIdResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BailServiceGetBailLogsByDealerIdResult(%+v)", *p)
}
